{"version":3,"sources":["LinkList.js","Main.js"],"names":["LinkListNode","element","next","toString","LinkList","dummyHead","size","insertNode","index","Error","prev","i","linkListNode","node","get","delNode","remove","list","console","log","curr","temp","linkInfo","getSize","a","length","reserve","document","body","innerHTML","Main","showHeader","linkList","showContent","content","title","info","window","onload"],"mappings":";;ACGA;;;;;;;;;;IACM8B;IDJA9B;;ACKF,kBAAc;ADJd,ACIc,0BDJ2B;AAAA,QAA7BC,OAA6B,uEAAnB,IAAmB;AAAA,ACKrC,QDLwBC,CCKnB6B,GDLgC,OCKrC,CAAgB,UAAhB,qDDL+B,IAAM;ACMrC,QAAIC,QAAQ,GAAG,IAAI5B,iBAAJ,EAAf,CAFU,CAGV;ADPqC;ACQrC,QAAMoB,CAAC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV,CAJU,CAKV;ADRA,ACSA,SDTKvB,OAAL,GAAeA,OAAf;AACA,ACSA,SDTKC,IAAL,GAAYA,IAAZ;AACH,ACSG;AACA;AACA;AACA;+BDVO;AACP,ACUA,SAAK,IDVE,ACUES,CAAC,GAAG,CDVDV,ACUZ,EAAgBU,CAAC,GAAGa,CDVb,ACUc,CDVDrB,ACUEsB,MAAtB,EDVO,ACUuBd,CAAC,CDV/B,CCUA,EAAmC;ADTtC,ACUOqB,MAAAA,QAAQ,CAACzB,UAAT,CAAoBI,CAApB,EAAuBa,CAAC,CAACb,CAAD,CAAxB,EAD+B,CAE/B;AACH,KAfS,CAgBV;AACA;AACA;AACA;ADbR,ACcQ;AACA;;;AACA,SAAKsB,WAAL,CAAiBD,QAAQ,CAAC7B,QAAT,EAAjB,EAtBU,CAuBV;AACA;AACH;;IDbgBC;;4BCeTa,MAAM;ADdd,ACeI,UAAIG,IAAI,GAAGH,IAAX,CDfU;AAAA,ACgBV,UAAIP,IAAI,GAAG,IAAX;;ADfA,ACgBA,SDhBKL,ICgBEe,IAAP,CDhBA,CCgBa,EDhBI,IAAIpB,YAAJ,CAAiB,IAAjB,EAAuB,IAAvB,CAAjB;AACA,ACgBI,SDhBCM,GCgBGe,CDhBR,GAAY,ACgBA,CDhBZ,ECgBeD,IAAI,CAAClB,IAAhB;ADfP,ACgBOkB,QAAAA,IAAI,GAAGV,IAAP;AACAA,QAAAA,IAAI,GAAGW,IAAP;AACH;;AACD,aAAOX,IAAP,aDjBM;AACN,ACiBH,aDjBU,KAAKJ,IAAZ;AACH;;gCCkBW4B,SAAS;AACjBP,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,CDjBM,aCiBwBK,OAA9B;ADhBA,ACiBH,aDjBU,KAAK5B,IAAL,KAAc,CAArB;AACH;AACD;+BCiBW6B,OAAO;AACdjB,MAAAA,OAAO,CAACkB,IAAR,+BAAoCD,KAApC;AACAR,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,cAA8BM,KAA9B;AACH;;;gCDhBWlC,SAAS;AACjB;AACA;AACA,ACgBRoC,MAAM,CAACC,MAAP,GAAgB,YAAW;ADfnB,ACgBJ,MAAIR,IAAJ;ADfI,ACgBP,CAFD,UDdavB,UAAL,CAAgB,CAAhB,EAAmBN,OAAnB;AACH;AAED;;;;;;;;;;;+BAQWO,OAAOP,SAAS;AACvB,UAAIO,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,KAAKF,IAA9B,EAAoC;AAChC,cAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,UAAIC,IAAI,GAAG,KAAKL,SAAhB;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;AAC5BD,QAAAA,IAAI,GAAGA,IAAI,CAACR,IAAZ;AACH;;AACD,UAAMU,YAAY,GAAG,IAAIZ,YAAJ,CAAiBC,OAAjB,EAA0B,IAA1B,CAArB;AACAW,MAAAA,YAAY,CAACV,IAAb,GAAoBQ,IAAI,CAACR,IAAzB;AACAQ,MAAAA,IAAI,CAACR,IAAL,GAAYU,YAAZ;AACA,WAAKN,IAAL;AACH;AAED;;;;;;;;;gCAMYL,SAAS;AACjB,WAAKM,UAAL,CAAgB,KAAKD,IAArB,EAA2BL,OAA3B;AACH;AAED;;;;;;;;;;wBAOIO,OAAO;AACP,UAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI,KAAKF,IAA/B,EAAqC;AACjC,cAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,UAAII,IAAI,GAAG,KAAKR,SAAL,CAAeH,IAA1B,CAJO,CAIyB;;AAChC,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;AAC5BE,QAAAA,IAAI,GAAGA,IAAI,CAACX,IAAZ;AACH;;AAED,aAAOW,IAAI,CAACZ,OAAZ;AACH;;;+BAEU;AACP,aAAO,KAAKa,GAAL,CAAS,CAAT,CAAP;AACH;;;8BAES;AACN,aAAO,KAAKA,GAAL,CAAS,KAAKR,IAAL,GAAY,CAArB,CAAP;AACH;AAED;;;;;;;;;;wBAOIE,OAAOP,SAAS;AAChB,UAAIO,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,KAAKF,IAA9B,EAAoC;AAChC,cAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH,OAHe,CAIhB;;;AACA,UAAII,IAAI,GAAG,KAAKR,SAAL,CAAeH,IAA1B;;AACA,WAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,KAAnB,EAA0BG,CAAC,EAA3B,EAA+B;AAC3BE,QAAAA,IAAI,GAAGA,IAAI,CAACL,KAAZ;AACH;;AACDK,MAAAA,IAAI,CAACZ,OAAL,GAAeA,OAAf;AACH;AAED;;;;;;;;;;4BAOQA,SAAS;AACb,UAAIY,IAAI,GAAG,KAAKR,SAAL,CAAeH,IAA1B;;AACA,aAAMW,IAAI,CAACX,IAAL,KAAc,IAApB,GAA2B;AACvB,YAAIW,IAAI,CAACZ,OAAL,KAAiBA,OAArB,EAA8B;AAC1B,iBAAO,IAAP;AACH;;AACDY,QAAAA,IAAI,GAAGA,IAAI,CAACX,IAAZ;AACH;;AACD,aAAO,KAAP;AACH;;;2BAEMM,OAAO;AACV,UAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,KAAKF,IAA9B,EAAoC;AAChC,cAAM,IAAIG,KAAJ,CAAU,cAAV,CAAN;AACH;;AACD,UAAIC,IAAI,GAAG,KAAKL,SAAhB;;AACA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EAAgC;AAC5BD,QAAAA,IAAI,GAAGA,IAAI,CAACR,IAAZ;AACH;;AACD,UAAIa,OAAO,GAAGL,IAAI,CAACR,IAAnB;AACAQ,MAAAA,IAAI,CAACR,IAAL,GAAYa,OAAO,CAACb,IAApB;AACA,UAAID,OAAO,GAAGc,OAAO,CAACd,OAAtB;AACAc,MAAAA,OAAO,GAAG,IAAV;AACA,WAAKT,IAAL;AACA,aAAOL,OAAP;AACH;;;kCAEa;AACV,aAAO,KAAKe,MAAL,CAAY,CAAZ,CAAP;AACH;;;iCAEY;AACT,aAAO,KAAKA,MAAL,CAAY,KAAKV,IAAL,GAAY,CAAxB,CAAP;AACH;;;4BACOW,MAAM;AACV;AACA,UAAIP,IAAI,GAAG,IAAX;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAIG,IAAI,GAAGH,IAAX;;AACA,aAAOG,IAAP,EAAa;AACX,YAAMC,IAAI,GAAGD,IAAI,CAAClB,IAAlB;AACAkB,QAAAA,IAAI,CAAClB,IAAL,GAAYQ,IAAZ;AACAA,QAAAA,IAAI,GAAGU,IAAP;AACAA,QAAAA,IAAI,GAAGC,IAAP;AACD;;AACD,aAAOX,IAAP;AACD;;;+BAEQ;AACP,UAAIY,QAAQ,4CAAqC,KAAKC,OAAL,EAArC,YAAZ;AACAD,MAAAA,QAAQ,YAAR;AACA,UAAIT,IAAI,GAAG,KAAKR,SAAL,CAAeH,IAA1B,CAHO,CAIP;AACA;AACA;AACA;AACA;;AACA,UAAMsB,CAAC,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAV;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,CAAC,CAACC,MAAtB,EAA8Bd,CAAC,EAA/B,EAAmC;AAC/B,aAAKJ,UAAL,CAAgBI,CAAhB,EAAmBa,CAAC,CAACb,CAAD,CAApB,EAD+B,CAE/B;AACH;;AACD,WAAKe,OAAL,CAAab,IAAb;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoB,KAAKO,OAAL,CAAab,IAAb,CAApB;;AACA,aAAMA,IAAI,CAACX,IAAL,KAAc,IAApB,EAA0B;AACtBoB,QAAAA,QAAQ,cAAOT,IAAI,CAACZ,OAAZ,OAAR;AACAY,QAAAA,IAAI,GAAGA,IAAI,CAACX,IAAZ;AACH;;AACDoB,MAAAA,QAAQ,cAAOT,IAAI,CAACZ,OAAZ,iBAAR;AACA0B,MAAAA,QAAQ,CAACC,IAAT,CAAcC,SAAd,aAA6BP,QAA7B;AAEA,aAAOA,QAAP;AACH","file":"Main.edc4ea10.js","sourceRoot":"..","sourcesContent":["class LinkListNode {\r\n    constructor(element = null, next = null) {\r\n        this.element = element;\r\n        this.next = next;\r\n    }\r\n\r\n    toString() {\r\n        return this.element.toString();\r\n    }\r\n}\r\n\r\n/**\r\n * @desc 增删改查的时间复杂度O{n}，因为都对整个链表进行了遍历\r\n *\r\n * @export\r\n * @class LinkList\r\n */\r\nexport default class LinkList {\r\n    constructor() {\r\n        this.dummyHead = new LinkListNode(null, null);\r\n        this.size = 0;\r\n    }\r\n\r\n    getSize() {\r\n        return this.size;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size === 0;\r\n    }\r\n    /**\r\n     *\r\n     * @memberof LinkList 添加头节点\r\n     */\r\n    addHeadNode(element) {\r\n        // const linkListNode = new LinkListNode(element, null);\r\n        // linkListNode.next = this.head;\r\n        // this.head = linkListNode;\r\n        // this.size++;\r\n        this.insertNode(0, element);\r\n    }\r\n\r\n    /**\r\n     * @desc 通过循环让prev不断切换，最终指向目标节点的前一个节点\r\n     * 使用虚拟头节点，这个节点不存储任何信息，不介入链表中的操作，仅仅充当链表的head\r\n     * 插入过程中始终为node.next = dummyHead.next;dummyHead.next = node; \r\n     * @param {*} index 插入的位置\r\n     * @param {*} element 插入的元素\r\n     * @memberof LinkList 插入新的节点\r\n     */\r\n    insertNode(index, element) {\r\n        if (index < 0 || index > this.size) {\r\n            throw new Error('out of index');\r\n        }\r\n        let prev = this.dummyHead;\r\n        for (let i = 0; i < index; i++) {\r\n            prev = prev.next;\r\n        }\r\n        const linkListNode = new LinkListNode(element, null);\r\n        linkListNode.next = prev.next;\r\n        prev.next = linkListNode;\r\n        this.size++; \r\n    }\r\n\r\n    /**\r\n     *\r\n     * @desc 插入链表尾部\r\n     * @param {*} element\r\n     * @memberof LinkList\r\n     */\r\n    innsertLast(element) {\r\n        this.insertNode(this.size, element);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @desc 获取当前索引值的元素\r\n     * @param {*} index 索引值\r\n     * @returns 当前元素\r\n     * @memberof LinkList\r\n     */\r\n    get(index) {\r\n        if (index < 0 || index >= this.size) {\r\n            throw new Error('out of index');\r\n        }\r\n        let node = this.dummyHead.next; // 当前头节点（dummyHead并不是实际的节点）\r\n        for (let i = 0; i < index; i++) {\r\n            node = node.next;\r\n        }\r\n\r\n        return node.element\r\n    }\r\n\r\n    getFirst() {\r\n        return this.get(0);\r\n    }\r\n\r\n    getLast() {\r\n        return this.get(this.size - 1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @desc 修改节点\r\n     * @param {*} index\r\n     * @param {*} element\r\n     * @memberof LinkList\r\n     */\r\n    set(index, element) {\r\n        if (index < 0 || index > this.size) {\r\n            throw new Error('out of index');\r\n        }\r\n        // 第一个真实节点\r\n        let node = this.dummyHead.next;\r\n        for(let i = 0; i < index; i++) {\r\n            node = node.index;\r\n        }\r\n        node.element = element;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @desc 判定元素是否在链表中\r\n     * @param {*} element\r\n     * @returns {boolean}\r\n     * @memberof LinkList\r\n     */\r\n    include(element) {\r\n        let node = this.dummyHead.next;\r\n        for (;node.next !== null;) {\r\n            if (node.element === element) {\r\n                return true;\r\n            }\r\n            node = node.next;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    remove(index) {\r\n        if (index < 0 || index > this.size) {\r\n            throw new Error('out of index');\r\n        }\r\n        let prev = this.dummyHead;\r\n        for (let i = 0; i < index; i++) {\r\n            prev = prev.next;\r\n        }\r\n        let delNode = prev.next;\r\n        prev.next = delNode.next;\r\n        let element = delNode.element;\r\n        delNode = null;\r\n        this.size--;\r\n        return element;\r\n    }\r\n\r\n    removeFirst() {\r\n        return this.remove(0);\r\n    }\r\n\r\n    removeLast() {\r\n        return this.remove(this.size - 1);\r\n    }\r\n    reserve(list) {\r\n        // if (list === null || list.next === null) return list\r\n        let prev = null\r\n        console.log(list)\r\n        let curr = list\r\n        while (curr) {\r\n          const temp = curr.next\r\n          curr.next = prev\r\n          prev = curr\r\n          curr = temp\r\n        }\r\n        return prev\r\n      }\r\n\r\n    toString() {\r\n        let linkInfo = `----LinkList:---- <br /> size: ${this.getSize()} <br />`;\r\n        linkInfo += `head [`;\r\n        let node = this.dummyHead.next;\r\n        // for (;node.next !== null;) {\r\n        //     console.log('aaaaaaaaaaaaaaaaaa', node.element);\r\n        //     linkInfo += `${node.element}->`;\r\n        //     node = node.next;\r\n        // }\r\n        const a = [2, 4, 3]\r\n        for (let i = 0; i < a.length; i++) {\r\n            this.insertNode(i, a[i]);\r\n            // console.log(linkList.toString());\r\n        }\r\n        this.reserve(node)\r\n        console.log('-=-=', this.reserve(node))\r\n        while(node.next !== null) {\r\n            linkInfo += `${node.element}->`;\r\n            node = node.next;\r\n        }\r\n        linkInfo += `${node.element}->NULL] tail`;\r\n        document.body.innerHTML = `${linkInfo}<br />`;\r\n\r\n        return linkInfo;\r\n    }\r\n}\r\n","/**\r\n * 测试\r\n */\r\nimport LinkList from './LinkList';\r\nclass Main {\r\n    constructor() {\r\n        this.showHeader('LinkList');\r\n        let linkList = new LinkList();\r\n        // let linkList2 = new LinkList();\r\n        const a = [2, 4, 3]\r\n        // const b = [5, 6, 4]\r\n        // a.map(item => {\r\n        //     linkList1.addHeadNode(item)\r\n        // })\r\n        // b.map(item => {\r\n        //     linkList2.addHeadNode(item)\r\n        // })\r\n        for (let i = 0; i < a.length; i++) {\r\n            linkList.insertNode(i, a[i]);\r\n            // console.log(linkList.toString());\r\n        }\r\n        // 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\r\n        // linkList.insertNode(0, 2);\r\n        // linkList.remove(3)\r\n        // this.showContent(linkList.toString())\r\n        // this.reserve(linkList)\r\n        // console.log(linkList.next)\r\n        this.showContent(linkList.toString())\r\n        // this.showContent(linkList2.toString())\r\n        // console.info(linkList.toString());\r\n    }\r\n\r\n    reserve(list) {\r\n        let curr = list\r\n        let prev = null\r\n        while (curr) {\r\n            let temp = curr.next\r\n            curr = prev\r\n            prev = temp\r\n        }\r\n        return prev\r\n    }\r\n\r\n    showContent(content) {\r\n        document.body.innerHTML += `${content}\\n\\n`;\r\n    }\r\n\r\n    showHeader(title) {\r\n        console.info(`--------------------${title}----------------------`);\r\n        document.body.innerHTML += `${title} <br />`\r\n    }\r\n}\r\n\r\nwindow.onload = function() {\r\n    new Main();\r\n}\r\n"]}