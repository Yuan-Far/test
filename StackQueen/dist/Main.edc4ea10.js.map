{"version":3,"sources":["../Array/Array-#1/utils/ErrorConstants.js","../Array/Array-#1/NewArray.js","Stack.js","Main.js"],"names":["ARRAY_ERROR","NewArray","capacity","arr","Array","size","length","newArray","i","index","val","getCapacity","resize","Error","INSERT_INDEX_ERROR","insert","GET_ERROR","SET_ERROR","push","console","log","DELETE_INDEX","element","Math","floor","remove","find","arrInfo","getSize","document","body","innerHTML","NewStack","isEmpty","pop","getLast","stackSize","stackCapacity","Main","info","ms","pushStack","toString","peakStack","showContent","popStack","content","window","onload"],"mappings":"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","file":"Main.edc4ea10.js","sourceRoot":"..","sourcesContent":["const ARRAY_ERROR = {\n    'ARRAY_CAPACITY_ERROR': 'ADD_ERROR--Array is full',\n    'INSERT_INDEX_ERROR': 'INSERT_INDEX_ERROR--Array out of bounds',\n    'GET_ERROR': 'GET_ERROR--Array out of bounds',\n    'SET_ERROR': 'SET_ERROR--Array out of bounds',\n};\n\nexport {\n    ARRAY_ERROR,\n};\n","import { ARRAY_ERROR } from './utils/ErrorConstants';\n/**\n * @author Yuan\n * @description 复写数组\n * @class NewArray\n */\nexport default class NewArray {\n    // 构造默认的数组大小\n    constructor(capacity = 10) {\n        // this.arr = Array.apply(null, Array(capacity)).map(_ => null);\n        this.arr = new Array(capacity);\n        this.size = 0;\n    }\n\n    // 获取当前数组大小\n    getSize() {\n        return this.size;\n    }\n    \n    /**\n     *\n     * @returns 数组大小 --> 数组的容量（非实际的大小）\n     * @memberof NewArray\n     */\n    getCapacity() {\n        return this.arr.length;\n    }\n    \n    /**\n     * @desc 数组判空\n     *\n     * @returns {Boolean}\n     * @memberof NewArray\n     */\n    isEmpty() {\n        return this.size === 0;\n    }\n    \n    /**\n     * @desc 数组扩容，仅容量{capacity}；与数组的实际大小无关\n     *\n     * @param {*} capacity\n     * @memberof NewArray\n     */\n    resize(capacity) {\n        let newArray = new Array(capacity);\n        for (let i = 0; i < this.size; i++) {\n            // 将旧的数组放入新的数组中\n            newArray[i] = this.arr[i];\n        }\n        this.arr = newArray;\n    }\n    /**\n     * @desc 插入元素\n     *\n     * @param {*} index 需要插入的索引\n     * @param {*} val 需要插入的元素\n     * @memberof NewArray\n     */\n    insert(index, val) {\n        // 判满\n        if (this.size === this.getCapacity()) {\n            // throw new Error(ARRAY_ERROR.ARRAY_CAPACITY_ERROR);\n            this.resize(this.size * 2);\n        }\n        // index是否符合要求\n        if (index < 0 || index > this.size) {\n            throw new Error(ARRAY_ERROR.INSERT_INDEX_ERROR);\n        }\n\n        for (let i = this.size - 1; i >= index; i--) {\n            this.arr[i + 1] = this.arr[i]\n        }\n\n        this.arr[index] = val\n        this.size++;\n    }\n    // 前方插入\n    unshift(val) {\n        this.insert(0, val);\n    }\n    // 后方插入\n    push(val) {\n        this.insert(this.size, val);\n    }\n    // 添加元素\n    add(val) {\n        // 判满 && 扩容\n        if (this.size === this.getCapacity()) {\n            this.resize(this.size * 2);\n            // throw new Error(ARRAY_ERROR.ARRAY_CAPACITY_ERROR);\n        }\n        this.arr[this.size] = val;\n        this.size++;\n    }\n    /**\n     * @desc 获取指定位置元素\n     *\n     * @param {*} index\n     * @returns 返回该索引对应的元素\n     * @memberof NewArray\n     */\n    get(index) {\n        if (index < 0 || index > this.size) {\n            throw new Error(ARRAY_ERROR.GET_ERROR);\n        }\n        return this.arr[index];\n    }\n\n\n    /**\n     * @desc 获取数组中第一个元素\n     *\n     * @returns 数组中第一个元素\n     * @memberof NewArray\n     */\n    getFirst() {\n        return this.arr[0];\n    }\n    \n    /**\n     * @desc 获取数组中最后一个元素\n     *\n     * @returns 数组中最后一个元素\n     * @memberof NewArray\n     */\n    getLast() {\n        return this.arr[this.size - 1];\n    }\n    /**\n     * @desc 重置某个索引的元素\n     *\n     * @param {*} index\n     * @param {*} val\n     * @memberof NewArray\n     */\n    set(index, val) {\n        if (index < 0 || index >= this.size) {\n            throw new Error(ARRAY_ERROR.SET_ERROR);\n        }\n        this.arr[index] = val;\n    }\n    /**\n     *\n     * @desc 包含元素\n     * @param {*} val 传入元素\n     * @returns 如果arr中包含该元素，则返回true\n     * @memberof NewArray\n     */\n    include(val) {\n        for (let i = 0; i < this.size; i++) {\n            if (val === this.arr[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     *\n     * @desc 查找元素\n     * @param {*} val 传入元素\n     * @returns 如果包含该元素，则返回元素的索引，否则返回-1(仅返回第一个匹配的位置)\n     * @memberof NewArray\n     */\n    find(val) {\n        for (let i = 0; i < this.size; i++) {\n            if (val === this.arr[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * @desc 批量查找数组中的相同元素\n     *\n     * @param {*} val\n     * @returns 元素在数组中的位置所组成的数组\n     * @memberof NewArray\n     */\n    findAll(val) {\n        const newArray = new NewArray(this.size);\n        for (let i = 0; i < this.size; i++) {\n            if (this.arr[i] === val) {\n                newArray.push(i);\n            }\n        }\n        return newArray;\n    }\n    /**\n     * @desc 删除索引元素\n     * @todo 被删除元素会以undefined填充\n     * @param {*} index 传入需要删除的索引\n     * @returns 返回被删除的元素\n     * @memberof NewArray\n     */\n    remove(index) {\n        console.log('rmove', index, this.size);\n        if (index < 0 || index >= this.size) {\n            throw new Error(ARRAY_ERROR.DELETE_INDEX);\n        }\n        const element = this.arr[index];\n        // index后面的元素覆盖前面的元素\n        for (let i = index; i < this.size - 1; i++) {\n            this.arr[i] = this.arr[i + 1];\n        }\n        this.size --;\n        // 最后一位置空\n        this.arr[this.size] = null;\n        // 缩容\n        if (\n            Math.floor(this.getCapacity() / 4) === this.size &&\n            Math.floor(this.getCapacity() / 2 !== 0)\n        ) {\n            this.resize(Math.floor(this.getCapacity() / 2));\n        }\n        return element;\n    }\n    // 删除数组中第一个元素\n    shift() {\n        return this.remove(0)\n    }\n    // 删除数组中最后一个元素\n    pop() {\n        return this.remove(this.size - 1)\n    }\n    /**\n     * @desc 根据元素删除\n     * @returns 返回被删除的元素\n     * @param {*} val\n     * @memberof NewArray\n     */\n    removeElement(val) {\n        const index = this.find(val);\n        if (index !== -1) {\n            this.remove(index);\n        }\n    }\n    removeAllElement(val) {\n        // const indexArr = this.findAll(val);\n        let index = this.find(val);\n        while (index !== -1) {\n            this.remove(index);\n            // 循环找下一个符合条件的元素\n            index = this.find(val);\n        }\n    }\n    /**\n     * @desc 获取数组信息\n     *\n     * @returns 返回数组信息\n     * @memberof NewArray\n     */\n    toString() {\n        let arrInfo = `Array: size-->${this.getSize()}, capacity-->${this.getCapacity()} \\n`;\n        arrInfo += `data = [`\n            for (let i = 0; i < this.size - 1; i++) {\n                arrInfo += `${this.arr[i]},`;\n            }\n        `]`;\n        arrInfo += `${this.arr[this.size - 1]}]`;\n        document.body.innerHTML += `${arrInfo}<br />`\n        return arrInfo;\n    }\n}\n","/**\n * @desc Stack LIFO --> 先进后出 --> 1,2,3(3,2,1)\n * 数组在加入限制后的结果（pop && push）\n */\nimport NewArray from '../Array/Array-#1/NewArray';\n\nexport default class NewStack {\n    constructor(capacity = 10) {\n        this.arr = new NewArray(capacity);\n    }\n\n    isEmpty() {\n        return this.arr.isEmpty();\n    }\n\n    stackSize() {\n        return this.arr.getSize();\n    }\n\n    stackCapacity() {\n        return this.arr.getCapacity();\n    }\n\n    pushStack(val) {\n        this.arr.push(val);\n    }\n\n    popStack() {\n        return this.arr.pop();\n    }\n\n    peakStack() {\n        return this.arr.getLast();\n    }\n\n    toString() {\n        let arrInfo = `Stack: size-->${this.stackSize()}, capacity-->${this.stackCapacity()} \\n`;\n        arrInfo += `data = [`\n            for (let i = 0; i < this.arr.size - 1; i++) {\n                arrInfo += `${this.arr.arr[i]},`;\n            }\n        `]`;\n        arrInfo += `${this.arr[this.arr.size - 1]}]`;\n        document.body.innerHTML += `${arrInfo}<br />`\n        return arrInfo;\n    }\n}\n","/**\n * 测试\n */\nimport NewStack from './Stack';\nclass Main {\n    constructor() {\n        console.info('----init Stack && Queen----');\n        let ms = new NewStack(10);\n        for (let i = 1; i <= 10; i++) {\n            ms.pushStack(i);\n            console.log(ms.toString());\n        }\n\n        console.log(ms.peakStack());\n        this.showContent(ms.peakStack());\n\n        while (!ms.isEmpty()) {\n            console.log(ms.toString());\n            ms.popStack();\n        }\n    }\n\n    showContent(content) {\n        document.body.innerHTML += `${content}\\n\\n`;\n    }\n}\n\nwindow.onload = function() {\n    new Main();\n}\n"]}